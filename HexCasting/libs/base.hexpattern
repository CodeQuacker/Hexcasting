// if (bool) do (patterns) else (patterns)
// Evaluates the second arg if true, evaluates the third if false
#def(if)(
    <1>
    {
        <2>
    }
    {
        <3>
    }
    Augur's Exaltation
    Hermes' Gambit
)

// for_each in (list) do (patterns)
// Runs Thoth's on the given list and pattern list, returning a list containing all outputs
#def(for_each)(
    {
        <2>
    }
    <1>
    Thoth's Gambit
)

#def(print)(
    {@str(<1>)} >>
    Reveal
    Bookkeeper's Gambit: v
)

// return vector of the targeted block
#def(target_block)(
    Mind's Reflection
    Compass' Purification
    Mind's Reflection
    Alidade's Purification
    Archer's Distillation
)

// return vector representing the side of targeted block
#def(target_block_face)(
    Mind's Reflection
    Compass' Purification
    Mind's Reflection
    Alidade's Purification
    Architect's Distillation
)

// return vector of block that would be placed on the side of targeted block
#def(target_block_on_block_face)(
    $target_block
    $target_block_face
    Additive Distillation
)

// return targeted entity iota
#def(target_entity)(
    Mind's Reflection
    Compass' Purification
    Mind's Reflection
    Alidade's Purification
    Scout's Distillation
)

// checks if there is a free cassette, if not, terminates the hex
#def(check_for_free_cassette)(
    $if(
        Threading Reflection II
        Numerical Reflection: 0
        Equality Distillation
    )(
        {@str(No free cassettes, terminating thread!)} >>
        Reveal
        Janus' Gambit
    )( 
        Threading Reflection II
        Scrivener's Purification
        {@str(.)}
        Separation Distillation
        Numerical Reflection: 0
        Selection Distillation
        Spacing Reflection
        Additive Distillation
        {@str(free cassettes, proceeding...)} >>
        Additive Distillation
        Reveal
        Bookkeeper's Gambit: v
    )
)

// starts thread to cast every n ticks 
// params - 
//      <1> name: string, 
//      <2> n: number, 
//      <3> loop: bool, 
//      <4> hex: many iotas
#def(start_thread)(
    {
        $print(something)
        Program Purification
        Numerical Reflection: 50
        {@str(test)} >>
        Enqueue
    }
    Numerical Reflection: <2>
    {@str(<1>)} >>
    Enqueue

)