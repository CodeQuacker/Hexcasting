#def(true)(
    True Reflection
)

#def(false)(
    False Reflection
)

// if (bool) do (patterns) else (patterns)
// Evaluates the second arg if true, evaluates the third if false
#def(if)(
    <1>
    {
        <2>
    }
    {
        <3>
    }
    Augur's Exaltation
    Hermes' Gambit
)

#def(runif)(
    <1>
    {
        <2>
    }
    {}
    Augur's Exaltation
    Hermes' Gambit
)

// for_each in (list) do (patterns)
// Runs Thoth's on the given list and pattern list, returning a list containing all outputs
#def(for_each)(
    {
        <2>
    }
    <1>
    Thoth's Gambit
)

// prints passed string and removes it from stack
#def(print)(
    {@str(<1>)} >>
    Reveal
    Bookkeeper's Gambit: v
)

// return vector of the targeted block
#def(target_block)(
    Mind's Reflection
    Compass' Purification
    Mind's Reflection
    Alidade's Purification
    Archer's Distillation
)

// return vector representing the side of targeted block
#def(target_block_face)(
    Mind's Reflection
    Compass' Purification
    Mind's Reflection
    Alidade's Purification
    Architect's Distillation
)

// return vector of block that would be placed on the side of targeted block
#def(target_block_on_block_face)(
    $target_block
    $target_block_face
    Additive Distillation
)

// return targeted entity iota
#def(target_entity)(
    Mind's Reflection
    Compass' Purification
    Mind's Reflection
    Alidade's Purification
    Scout's Distillation
)

// checks if there is a free cassette, if not, terminates the hex
#def(check_for_free_cassette)(
    $if(
        Threading Reflection II
        Numerical Reflection: 0
        Equality Distillation
    )(
        $print(No free cassettes, terminating thread!)
        Janus' Gambit
    )( 
        Threading Reflection II
        Scrivener's Purification
        {@str(.)} >>
        Separation Distillation
        Numerical Reflection: 0
        Selection Distillation
        Spacing Reflection
        Additive Distillation
        {@str(free cassettes, proceeding...)} >>
        Additive Distillation
        Reveal
        Bookkeeper's Gambit: v
    )
)

// starts thread to cast every n ticks 
// params - 
//      <1> name: string, 
//      <2> n: number, 
//      <3> loop: bool, 
//      <4> hex: many iotas
#def(start_thread)(
    {
        <4>
        $if(<3>)(
            {@str(<1>)} >>
            Program Purification
            Numerical Reflection: <2>
            {@str(<1>)} >>
            Enqueue
        )()
    }
    Numerical Reflection: <2>
    {@str(<1>)} >>
    Enqueue

)

// if one of the passed arguments is "stop" stops or dequeues the hex, prints message with passed name
// params - 
//      <1> name: string
#def(stop_detect)(
    $runif(
        Flock's Reflection
        Augur's Purification
    )(
        $runif(
            {@str(stop)}>>
            Locator's Distillation
            Numerical Reflection: -1
            Inequality Distillation
        )(
            $if(
                {@str(<1>)} >>
                Program Purification II
                Augur's Purification
            )(
                // if it is cassette, dequeue
                {@str(<1>)} >>
                Dequeue
                $print(Dequeued <1>)
            )(
                // if it is hex, stop it
                $print(Stopping <1>)
            )
        )
    )
)